openapi: 3.0.1

info:
  title:
     Fn::Sub: "${AWS::StackName} - IPV Return Credential Issuer Private API"
  version: "1.0"
  description: IPV Return Test automation harness API specification

x-amazon-apigateway-globals:
  servers:
    - url: https://www.example.com

tags:
  - name: Testing - API to enable automation
    description: Endpoint implemented to enable testing

# To be re-added in KIWI-1105
# x-amazon-apigateway-policy:
#   Version: "2012-10-17"
#   Statement:
#   - Effect: "Deny"
#     Principal:
#       AWS:  "*"
#     Action: "execute-api:Invoke"
#     Resource: "execute-api:/*"
#     Condition:
#       StringNotEquals:
#         "aws:PrincipalAccount":
#           - "${AWS::AccountId}"
#   - Effect: "Allow"
#     Principal:
#       AWS:  "*"
#     Action: "execute-api:Invoke"
#     Resource: "execute-api:/*"

paths:
  getRecordByUserId/{tableName}/{userId}:
    get:
      operationId: getRecordById
      summary: Get a session by userId from DynamoDB
      description: |
        Endpoint to get a session from DynamoDB using userId as the primary key.
      parameters:
        - name: userId
          in: path
          description: The value of the userId primary key to find the record in DynamoDB
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table to find the record in DynamoDB
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  session:
                    type: object
                    description: The found session from DynamoDB.
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      # security:
      #   - sigv4Reference: []
      x-amazon-apigateway-request-validator: "requestParamsOnly"
      x-amazon-apigateway-integration:
        httpMethod: POST
        credentials:
          Fn::GetAtt: [ "DynamoDbAccessRole", "Arn" ]
        uri: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem"
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.path.tableName: "method.request.path.tableName"
        requestTemplates:
          application/json: |
            {
              "TableName": "$input.params('tableName')",
              "Key": {
                "userId": {
                  "S": "$input.params('userId')"
                }
              }
            }
        responses:
          default:
            statusCode: "200"
        type: aws
  
  /bucket/:
    get:
      operationId: getBucket
      summary: List the contents of the test harness bucket
      description: >-
        Endpoint to list the contents of the test harness bucket. Up to 1000 objects are returned, sorted by ascending
        key. A `prefix` can be specified as a query parameter to filter the results.
      parameters:
        - name: prefix
          in: query
          description: Prefix to list objects from the bucket with
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Success
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      # security:
      #   - sigv4Reference: []
      x-amazon-apigateway-request-validator: "requestParamsOnly"
      x-amazon-apigateway-integration:
        httpMethod: GET
        credentials:
          Fn::GetAtt:
            - AccessTestHarnessBucketRole
            - Arn
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:s3:path/${EventTestBucket}/"
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
          integration.request.querystring.prefix: "method.request.querystring.prefix"
        responses:
          default:
            statusCode: "200"
        type: aws

  /send-mock-txma-message:
    post:
      operationId: postSendMockTxMAMessage
      summary: send message to mock TxMA queue
      description: >-
        Endpoint sends given message to mock TxMA queue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMockTxMAMessageRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  session:
                    type: object
                    description: Success
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      # security:
        # - sigv4Reference: []
      x-amazon-apigateway-request-validator: "both"
      x-amazon-apigateway-integration:
        httpMethod: POST
        credentials:
          Fn::GetAtt:
            - MockTxMAQueueRole
            - Arn
        uri:
          Fn::Sub:
            - "arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${QueueName}"
            - QueueName:
                Fn::ImportValue:
                  "Fn::Sub": "${BackendStack}-MockTxMASQSQueue-name"
        passthroughBehavior: "when_no_match"
        requestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
        requestTemplates:
          application/json: "Action=SendMessage&MessageBody=$input.body"
        responses:
          default:
            statusCode: "200"
        type: "aws"

  /object/{object-key+}:
    get:
      operationId: getTestObject
      summary: Get an object from the test bucket
      description: >-
        Endpoint returns the contents of a specific object from the test bucket.
      parameters:
        - name: object-key
          in: path
          description: Key to query the bucket with
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        "200":
          description: OK
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      # security:
        # - sigv4Reference: []
      x-amazon-apigateway-request-validator: "requestParamsOnly"
      x-amazon-apigateway-integration:
        httpMethod: GET
        credentials:
          Fn::GetAtt:
            - AccessTestHarnessBucketRole
            - Arn
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:s3:path/${EventTestBucket}/{key}"
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
          integration.request.path.key: "method.request.path.object-key"
        responses:
          default:
            statusCode: "200"
        type: aws

components:
  schemas:
    SendMockTxMAMessageRequest:
      description: "payload to send message to mock txma queue"
      required:
        - event_id
        - client_id
        - event_name
      additionalProperties: true
      properties:
        event_id:
          type: string
          format: uuid
          description: "event_id of the SQS message"
          example: "11111111-1111-1111-1111-111111111111"
        client_id: 
          type: string
          description: "the OAuth client identifier which has been registered with F2F"
          example: "ekwU"
        event_name:
          type: string
          enum:
            - "IPV_F2F_CRI_VC_CONSUMED"
            - "F2F_YOTI_START"
            - "AUTH_IPV_AUTHORISATION_REQUESTED"
          description: name of the event
          example: "IPV_F2F_CRI_VC_CONSUMED"
        clientLandingPageUrl:
          type: string
          description: "user redirect URL"
          example: "REDIRECT_URL"
        timestamp:
          type: number
          description: "Timestamp of event"
          example: "1588867971443"
        timestamp_formatted:
          type: string
          description: "Formatted timestamp of event"
          example: "2023-04-19T11:00:01.000Z"
        user:
          type: object
          properties:
            user_id:
              type: string
            email:
              type: string
          description: "user details"
        restricted:
          type: object
          properties:
            nameParts:
              type: array
          description: "additional details"

  # To be re-added in KIWI-1105
  # securitySchemes:
  #   sigv4Reference:
  #     type: apiKey
  #     name: Authorization
  #     in: header
  #     x-amazon-apigateway-authtype: awsSigv4

x-amazon-apigateway-request-validators:
    both:
      validateRequestBody: true
      validateRequestParameters: true
    requestBodyOnly:
      validateRequestBody: true
      validateRequestParameters: false
    requestParamsOnly:
      validateRequestBody: false
      validateRequestParameters: true
